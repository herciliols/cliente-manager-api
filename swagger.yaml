openapi: 3.0.3
info:
  title: Client Manager App
  version: 1.0.11
servers:
  - url: http://localhost:3000
tags:
  - name: login
    description: Usuario
  - name: clientes
    description: Gestão de clientes
paths:
  /login:
    post:
      tags:
        - login
      summary: Autenticação para obter token
      description: Autenticação de usuário
      requestBody:
        description: Autentica
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPostRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseSuccess'
                
        '400':
          description: Bad Request 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseBadRequest'
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseUnauthorized'
                
        '500':
          description: Internal Server Error 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseInternalServerError'
      security: []
      
  /customers/:
    get:
      tags:
        - clientes
      summary: Obter todos os clientes cadastrados
      description: Todos os clientes
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersGetResponseSuccess'
      security:
        - BearerAuth: []
      x-swagger-router-controller: false

  /customers/{customerId}:
    get:
      tags:
        - clientes
      summary: Obter um único cliente pelo ID
      description: Retorna um único cliente pelo ID
      parameters:
        - name: customerId
          in: path
          description: ID do cliente a ser retornado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersGetResponseSuccess'
      security:
        - BearerAuth: []
      x-swagger-router-controller: false
      
  /customers/update/{customerId}:
    put:
      tags:
        - clientes
      summary: Atualizar dados de um cliente
      description: Atualizar dados de um cliente existente por ID
      parameters:
        - name: customerId
          in: path
          description: ID do cliente a ser atualizado
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Dados do cliente a serem atualizados
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPostRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPutResponseSuccess'        
      security:
        - BearerAuth: []
      x-swagger-router-controller: false

  /customers/delete/{customerIds}:
    delete:
      tags:
        - clientes
      summary: Deletar clientes
      description: Deletar um conjunto de clientes pelo id 
      parameters:
        - name: customerIds
          in: path
          description: Lista de IDs de clientes a serem excluídos (separados por vírgula)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersDeleteResponseSuccess'
      security:
        - BearerAuth: []
      x-swagger-router-controller: false

      
      
      
  
components:
  schemas:
    LoginPostRequest:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: usuario
        password:
          type: string
          example: 123
    LoginResponseSuccess:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoidXN1YXJpbyIsImlhdCI6MTcwODczOTE5MiwiZXhwIjoxNzA4NzM5NzkyfQ.GsZwa_ItPy6cl7dlC43ivB3eVIseA4IuoVGxuRjCqjo
    LoginResponseBadRequest:
     type: object
     properties:
      error:
        type: string
        example: Bad Request
      message: 
        type: string
        example: Campos obrigatórios 'username' e 'password' são necessários e não podem estar vazios.  
    LoginResponseUnauthorized:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message: 
          type: string
          example: Credenciais inválidas. A autenticação é necessária para acessar este recurso.
    LoginResponseInternalServerError:
     type: object
     properties:
      error:
        type: string
        example: Internal Server Error
      message: 
        type: string
        example: Ocorreu um erro interno no servidor.  

    CustomersGetResponseSuccess:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 3
          nome:
            type: string
            example: "Carlos"
          sobrenome:
            type: string
            example: "Oliveira"
          sexo:
            type: string
            example: "Masculino"
          data_nascimento:
            type: string
            format: date-time
            example: "1995-03-10T03:00:00.000Z"
    CustomersDeleteResponseSuccess:
      required:
        - username
        - password
      type: object
      properties:
        message:
          type: string
          example: Clientes com IDs [1, 2] excluídos com sucesso
    CustomerPutResponseSuccess:
      type: object
      properties:
        message:
          type: string
          example: Cliente com ID 3 atualizado com sucesso
    CustomerPostRequest:
      type: object
      properties:
        nome:
          type: string
          example: João
        sobrenome:
          type: string
          example: Silva
        sexo:
          type: string
          example: Masculino
        data_nascimento:
          type: string
          example: 1990-01-01
          
          
  securitySchemes:
    BearerAuth:
      type: http 
      scheme: bearer
      bearerFormat: JWT

      
security:
- BearerAuth: []